// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: example/roblox/v2.proto

package cloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cloud_CreateCreatorStoreProduct_FullMethodName = "/example.roblox.Cloud/CreateCreatorStoreProduct"
	Cloud_GetCreatorStoreProduct_FullMethodName    = "/example.roblox.Cloud/GetCreatorStoreProduct"
	Cloud_UpdateCreatorStoreProduct_FullMethodName = "/example.roblox.Cloud/UpdateCreatorStoreProduct"
	Cloud_CreateUniverse_FullMethodName            = "/example.roblox.Cloud/CreateUniverse"
	Cloud_GetUniverse_FullMethodName               = "/example.roblox.Cloud/GetUniverse"
	Cloud_UpdateUniverse_FullMethodName            = "/example.roblox.Cloud/UpdateUniverse"
	Cloud_GetUser_FullMethodName                   = "/example.roblox.Cloud/GetUser"
)

// CloudClient is the client API for Cloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudClient interface {
	// An aep-compliant Create method for CreatorStoreProduct.
	CreateCreatorStoreProduct(ctx context.Context, in *CreateCreatorStoreProductRequest, opts ...grpc.CallOption) (*CreatorStoreProduct, error)
	// An aep-compliant Get method for CreatorStoreProduct.
	GetCreatorStoreProduct(ctx context.Context, in *GetCreatorStoreProductRequest, opts ...grpc.CallOption) (*CreatorStoreProduct, error)
	// An aep-compliant Update method for CreatorStoreProduct.
	UpdateCreatorStoreProduct(ctx context.Context, in *UpdateCreatorStoreProductRequest, opts ...grpc.CallOption) (*CreatorStoreProduct, error)
	// An aep-compliant Create method for Universe.
	CreateUniverse(ctx context.Context, in *CreateUniverseRequest, opts ...grpc.CallOption) (*Universe, error)
	// An aep-compliant Get method for Universe.
	GetUniverse(ctx context.Context, in *GetUniverseRequest, opts ...grpc.CallOption) (*Universe, error)
	// An aep-compliant Update method for Universe.
	UpdateUniverse(ctx context.Context, in *UpdateUniverseRequest, opts ...grpc.CallOption) (*Universe, error)
	// An aep-compliant Get method for User.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
}

type cloudClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudClient(cc grpc.ClientConnInterface) CloudClient {
	return &cloudClient{cc}
}

func (c *cloudClient) CreateCreatorStoreProduct(ctx context.Context, in *CreateCreatorStoreProductRequest, opts ...grpc.CallOption) (*CreatorStoreProduct, error) {
	out := new(CreatorStoreProduct)
	err := c.cc.Invoke(ctx, Cloud_CreateCreatorStoreProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) GetCreatorStoreProduct(ctx context.Context, in *GetCreatorStoreProductRequest, opts ...grpc.CallOption) (*CreatorStoreProduct, error) {
	out := new(CreatorStoreProduct)
	err := c.cc.Invoke(ctx, Cloud_GetCreatorStoreProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) UpdateCreatorStoreProduct(ctx context.Context, in *UpdateCreatorStoreProductRequest, opts ...grpc.CallOption) (*CreatorStoreProduct, error) {
	out := new(CreatorStoreProduct)
	err := c.cc.Invoke(ctx, Cloud_UpdateCreatorStoreProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) CreateUniverse(ctx context.Context, in *CreateUniverseRequest, opts ...grpc.CallOption) (*Universe, error) {
	out := new(Universe)
	err := c.cc.Invoke(ctx, Cloud_CreateUniverse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) GetUniverse(ctx context.Context, in *GetUniverseRequest, opts ...grpc.CallOption) (*Universe, error) {
	out := new(Universe)
	err := c.cc.Invoke(ctx, Cloud_GetUniverse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) UpdateUniverse(ctx context.Context, in *UpdateUniverseRequest, opts ...grpc.CallOption) (*Universe, error) {
	out := new(Universe)
	err := c.cc.Invoke(ctx, Cloud_UpdateUniverse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Cloud_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudServer is the server API for Cloud service.
// All implementations must embed UnimplementedCloudServer
// for forward compatibility
type CloudServer interface {
	// An aep-compliant Create method for CreatorStoreProduct.
	CreateCreatorStoreProduct(context.Context, *CreateCreatorStoreProductRequest) (*CreatorStoreProduct, error)
	// An aep-compliant Get method for CreatorStoreProduct.
	GetCreatorStoreProduct(context.Context, *GetCreatorStoreProductRequest) (*CreatorStoreProduct, error)
	// An aep-compliant Update method for CreatorStoreProduct.
	UpdateCreatorStoreProduct(context.Context, *UpdateCreatorStoreProductRequest) (*CreatorStoreProduct, error)
	// An aep-compliant Create method for Universe.
	CreateUniverse(context.Context, *CreateUniverseRequest) (*Universe, error)
	// An aep-compliant Get method for Universe.
	GetUniverse(context.Context, *GetUniverseRequest) (*Universe, error)
	// An aep-compliant Update method for Universe.
	UpdateUniverse(context.Context, *UpdateUniverseRequest) (*Universe, error)
	// An aep-compliant Get method for User.
	GetUser(context.Context, *GetUserRequest) (*User, error)
	mustEmbedUnimplementedCloudServer()
}

// UnimplementedCloudServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServer struct {
}

func (UnimplementedCloudServer) CreateCreatorStoreProduct(context.Context, *CreateCreatorStoreProductRequest) (*CreatorStoreProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreatorStoreProduct not implemented")
}
func (UnimplementedCloudServer) GetCreatorStoreProduct(context.Context, *GetCreatorStoreProductRequest) (*CreatorStoreProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreatorStoreProduct not implemented")
}
func (UnimplementedCloudServer) UpdateCreatorStoreProduct(context.Context, *UpdateCreatorStoreProductRequest) (*CreatorStoreProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreatorStoreProduct not implemented")
}
func (UnimplementedCloudServer) CreateUniverse(context.Context, *CreateUniverseRequest) (*Universe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUniverse not implemented")
}
func (UnimplementedCloudServer) GetUniverse(context.Context, *GetUniverseRequest) (*Universe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniverse not implemented")
}
func (UnimplementedCloudServer) UpdateUniverse(context.Context, *UpdateUniverseRequest) (*Universe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUniverse not implemented")
}
func (UnimplementedCloudServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCloudServer) mustEmbedUnimplementedCloudServer() {}

// UnsafeCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServer will
// result in compilation errors.
type UnsafeCloudServer interface {
	mustEmbedUnimplementedCloudServer()
}

func RegisterCloudServer(s grpc.ServiceRegistrar, srv CloudServer) {
	s.RegisterService(&Cloud_ServiceDesc, srv)
}

func _Cloud_CreateCreatorStoreProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreatorStoreProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).CreateCreatorStoreProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_CreateCreatorStoreProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).CreateCreatorStoreProduct(ctx, req.(*CreateCreatorStoreProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_GetCreatorStoreProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreatorStoreProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).GetCreatorStoreProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_GetCreatorStoreProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).GetCreatorStoreProduct(ctx, req.(*GetCreatorStoreProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_UpdateCreatorStoreProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreatorStoreProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).UpdateCreatorStoreProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_UpdateCreatorStoreProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).UpdateCreatorStoreProduct(ctx, req.(*UpdateCreatorStoreProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_CreateUniverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUniverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).CreateUniverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_CreateUniverse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).CreateUniverse(ctx, req.(*CreateUniverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_GetUniverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).GetUniverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_GetUniverse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).GetUniverse(ctx, req.(*GetUniverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_UpdateUniverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUniverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).UpdateUniverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_UpdateUniverse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).UpdateUniverse(ctx, req.(*UpdateUniverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cloud_ServiceDesc is the grpc.ServiceDesc for Cloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.roblox.Cloud",
	HandlerType: (*CloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCreatorStoreProduct",
			Handler:    _Cloud_CreateCreatorStoreProduct_Handler,
		},
		{
			MethodName: "GetCreatorStoreProduct",
			Handler:    _Cloud_GetCreatorStoreProduct_Handler,
		},
		{
			MethodName: "UpdateCreatorStoreProduct",
			Handler:    _Cloud_UpdateCreatorStoreProduct_Handler,
		},
		{
			MethodName: "CreateUniverse",
			Handler:    _Cloud_CreateUniverse_Handler,
		},
		{
			MethodName: "GetUniverse",
			Handler:    _Cloud_GetUniverse_Handler,
		},
		{
			MethodName: "UpdateUniverse",
			Handler:    _Cloud_UpdateUniverse_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Cloud_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/roblox/v2.proto",
}
